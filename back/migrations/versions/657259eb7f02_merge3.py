"""merge3

Revision ID: 657259eb7f02
Revises: 
Create Date: 2025-07-24 17:59:37.666637

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '657259eb7f02'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bank',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('logo_url', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('card_brand',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('logo_url', sa.String(length=255), nullable=True),
    sa.Column('icon_component_name', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('company',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('expense_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('income_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('loan_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('region',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)

    op.create_table('bank_account',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('iban_number', sa.String(length=34), nullable=False),
    sa.Column('overdraft_limit', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('bank_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['bank_id'], ['bank.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('bank_id', 'name', name='_bank_account_name_uc'),
    sa.UniqueConstraint('iban_number')
    )
    op.create_table('payment_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('account_name',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('payment_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['payment_type_id'], ['payment_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('account_status_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['bank_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bank_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bank_account_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('period', sa.Enum('morning', 'evening', name='period'), nullable=False),
    sa.Column('amount_try', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('amount_usd', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('amount_eur', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('rate_usd_try', sa.Numeric(precision=15, scale=4), nullable=True),
    sa.Column('rate_eur_try', sa.Numeric(precision=15, scale=4), nullable=True),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('bank_account_id', 'date', 'period', name='_bank_account_date_period_uc')
    )
    op.create_table('credit_card',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('limit', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('cash_advance_limit', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('statement_day', sa.Integer(), nullable=False),
    sa.Column('due_day', sa.Integer(), nullable=False),
    sa.Column('bank_account_id', sa.Integer(), nullable=False),
    sa.Column('payment_type_id', sa.Integer(), nullable=False),
    sa.Column('card_brand_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['card_brand_id'], ['card_brand.id'], ),
    sa.ForeignKeyConstraint(['payment_type_id'], ['payment_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('payment_type_id')
    )
    op.create_table('daily_balance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('morning_balance', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('evening_balance', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['bank_account.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_id', 'date', name='_account_date_uc')
    )
    op.create_table('loans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False, comment="Krediyi ayırt etmek için kullanılan isim (örn: 'Nisan 2025 Taşıt Kredisi')"),
    sa.Column('bank_account_id', sa.Integer(), nullable=False, comment='Kredinin yattığı banka hesabı'),
    sa.Column('loan_type_id', sa.Integer(), nullable=False, comment='Kredinin türü (örn: Taksitli, Rotatif)'),
    sa.Column('amount_drawn', sa.Numeric(precision=10, scale=2), nullable=False, comment='Çekilen toplam anapara tutarı'),
    sa.Column('term_months', sa.Integer(), nullable=False, comment='Kredinin vadesi (ay olarak)'),
    sa.Column('monthly_interest_rate', sa.Float(), nullable=False, comment='Bankanın verdiği vergisiz, net aylık faiz oranı (örn: 0.05)'),
    sa.Column('bsmv_rate', sa.Float(), nullable=False, comment='Faiz üzerinden alınan BSMV oranı (varsayılan: 0.15)'),
    sa.Column('payment_due_day', sa.Integer(), nullable=False, comment="Ödemenin her ayın kural olarak hangi gününde beklendiğini gösteren tamsayı (örn: 15). Bir sonraki ödeme tarihi, bu 'kural' günü baz alınarak hesaplanır."),
    sa.Column('monthly_payment_amount', sa.Numeric(precision=10, scale=2), nullable=True, comment='Hesaplama sonucu bulunan, her ay ödenecek sabit taksit tutarı'),
    sa.Column('remaining_principal', sa.Numeric(precision=10, scale=2), nullable=False, comment='Kalan mevcut anapara borcu. Her ödemede güncellenir.'),
    sa.Column('status', sa.Enum('PENDING_APPROVAL', 'ACTIVE', 'PAID_IN_FULL', 'OVERDUE', 'DEFAULTED', name='loanstatus'), nullable=False, comment='Kredinin mevcut durumu (Aktif, Ödendi vb.)'),
    sa.Column('date_drawn', sa.Date(), nullable=False, comment='Kredinin çekildiği, yani paranın hesaba geçtiği ve borcun resmen başladığı tarih.'),
    sa.Column('next_payment_due_date', sa.Date(), nullable=True, comment='Bir sonraki taksit ödemesinin beklendiği *net* tarih. Bu alan, vadesi geçen kredileri bulmak gibi operasyonel sorgularda kullanılır ve performansı artırır.'),
    sa.Column('description', sa.Text(), nullable=True, comment='Krediyle ilgili ek notlar'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Bu kaydın veritabanında ilk oluşturulduğu zaman damgası.'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Bu kaydın en son güncellendiği zaman damgası.'),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], ),
    sa.ForeignKeyConstraint(['loan_type_id'], ['loan_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('amortization_schedule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('loan_id', sa.Integer(), nullable=False),
    sa.Column('installment_number', sa.Integer(), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=False),
    sa.Column('monthly_payment', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('principal_share', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('interest_share', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('remaining_principal', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['loan_id'], ['loans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('amortization_schedule', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_amortization_schedule_loan_id'), ['loan_id'], unique=False)

    op.create_table('budget_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('account_name_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_name_id'], ['account_name.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('credit_card_transaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('credit_card_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['credit_card_id'], ['credit_card.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expense',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('payment_type_id', sa.Integer(), nullable=True),
    sa.Column('account_name_id', sa.Integer(), nullable=True),
    sa.Column('budget_item_id', sa.Integer(), nullable=True),
    sa.Column('remaining_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['account_name_id'], ['account_name.id'], ),
    sa.ForeignKeyConstraint(['budget_item_id'], ['budget_item.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['expense_group.id'], ),
    sa.ForeignKeyConstraint(['payment_type_id'], ['payment_type.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('income',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=False),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('received_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('status', sa.Enum('UNRECEIVED', 'RECEIVED', 'PARTIALLY_RECEIVED', 'OVER_RECEIVED', name='incomestatus'), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.Column('account_name_id', sa.Integer(), nullable=False),
    sa.Column('budget_item_id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_name_id'], ['account_name.id'], ),
    sa.ForeignKeyConstraint(['budget_item_id'], ['budget_item.id'], ),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['income_group.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('loan_payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('loan_id', sa.Integer(), nullable=False, comment='Bu ödemenin ait olduğu kredi'),
    sa.Column('amortization_schedule_id', sa.Integer(), nullable=True, comment="Eğer bu bir taksit ödemesiyse, ilgili taksitin ID'si"),
    sa.Column('amount_paid', sa.Numeric(precision=10, scale=2), nullable=False, comment='Müşteriden alınan toplam ödeme tutarı'),
    sa.Column('principal_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Ödenen toplam tutarın anapara borcunu azaltan kısmı'),
    sa.Column('interest_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Ödenen toplam tutarın faiz borcunu karşılayan kısmı (BSMV dahil)'),
    sa.Column('payment_date', sa.Date(), nullable=False, comment='Ödemenin yapıldığı fiili tarih'),
    sa.Column('payment_type', sa.Enum('REGULAR_INSTALLMENT', 'PREPAYMENT', 'SETTLEMENT', 'OTHER', name='loanpaymenttype'), nullable=False, comment='Ödemenin türü (örn: Normal taksit, ara ödeme)'),
    sa.Column('status', sa.Enum('COMPLETED', 'PENDING_CLEARANCE', 'REVERSED', name='loanpaymentstatus'), nullable=False, comment="Ödemenin durumu. Bankadan dönen bir ödeme 'İPTAL EDİLDİ' olarak işaretlenebilir."),
    sa.Column('notes', sa.String(length=255), nullable=True, comment='Ödemeyle ilgili notlar veya banka referans numarası'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Bu kayıt defterine işlemin girildiği zaman damgası'),
    sa.ForeignKeyConstraint(['amortization_schedule_id'], ['amortization_schedule.id'], ),
    sa.ForeignKeyConstraint(['loan_id'], ['loans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('income_receipt',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('income_id', sa.Integer(), nullable=False),
    sa.Column('receipt_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('receipt_date', sa.Date(), nullable=False),
    sa.Column('notes', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['income_id'], ['income.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('expense_id', sa.Integer(), nullable=False),
    sa.Column('payment_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('payment_date', sa.Date(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['expense_id'], ['expense.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payment')
    op.drop_table('income_receipt')
    op.drop_table('loan_payments')
    op.drop_table('income')
    op.drop_table('expense')
    op.drop_table('credit_card_transaction')
    op.drop_table('budget_item')
    with op.batch_alter_table('amortization_schedule', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_amortization_schedule_loan_id'))

    op.drop_table('amortization_schedule')
    op.drop_table('loans')
    op.drop_table('daily_balance')
    op.drop_table('credit_card')
    op.drop_table('bank_log')
    op.drop_table('account_status_history')
    op.drop_table('account_name')
    op.drop_table('payment_type')
    op.drop_table('bank_account')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_username'))
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('region')
    op.drop_table('loan_types')
    op.drop_table('income_group')
    op.drop_table('expense_group')
    op.drop_table('company')
    op.drop_table('card_brand')
    op.drop_table('bank')
    # ### end Alembic commands ###
